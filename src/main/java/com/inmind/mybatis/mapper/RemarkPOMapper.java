package com.inmind.mybatis.mapper;

import com.inmind.mybatis.entity.RemarkPO;
import com.inmind.mybatis.entity.RemarkPOExample;
import java.util.List;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.session.RowBounds;

public interface RemarkPOMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    long countByExample(RemarkPOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    int deleteByExample(RemarkPOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    @Insert({
        "insert into remark (company_id, owner_id, ",
        "resume_id, org_id, call_id, ",
        "project_id, project_type, ",
        "relate_id, type, form_id, ",
        "group_code, submitted, ",
        "deleted, created_by, ",
        "updated_by, created_at, ",
        "updated_at, question_id, ",
        "remark)",
        "values (#{companyId,jdbcType=BIGINT}, #{ownerId,jdbcType=BIGINT}, ",
        "#{resumeId,jdbcType=BIGINT}, #{orgId,jdbcType=BIGINT}, #{callId,jdbcType=BIGINT}, ",
        "#{projectId,jdbcType=BIGINT}, #{projectType,jdbcType=INTEGER}, ",
        "#{relateId,jdbcType=BIGINT}, #{type,jdbcType=INTEGER}, #{formId,jdbcType=BIGINT}, ",
        "#{groupCode,jdbcType=VARCHAR}, #{submitted,jdbcType=INTEGER}, ",
        "#{deleted,jdbcType=INTEGER}, #{createdBy,jdbcType=BIGINT}, ",
        "#{updatedBy,jdbcType=BIGINT}, #{createdAt,jdbcType=TIMESTAMP}, ",
        "#{updatedAt,jdbcType=TIMESTAMP}, #{questionId,jdbcType=BIGINT}, ",
        "#{remark,jdbcType=LONGVARCHAR})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Long.class)
    int insert(RemarkPO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    int insertSelective(RemarkPO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    List<RemarkPO> selectByExampleWithBLOBsWithRowbounds(RemarkPOExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    List<RemarkPO> selectByExampleWithBLOBs(RemarkPOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    List<RemarkPO> selectByExampleWithRowbounds(RemarkPOExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    List<RemarkPO> selectByExample(RemarkPOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") RemarkPO record, @Param("example") RemarkPOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    int updateByExampleWithBLOBs(@Param("record") RemarkPO record, @Param("example") RemarkPOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table remark
     *
     * @mbg.generated
     */
    int updateByExample(@Param("record") RemarkPO record, @Param("example") RemarkPOExample example);
}