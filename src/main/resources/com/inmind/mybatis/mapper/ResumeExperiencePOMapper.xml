<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.inmind.mybatis.mapper.ResumeExperiencePOMapper">
  <resultMap id="BaseResultMap" type="com.inmind.mybatis.entity.ResumeExperiencePO">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="id" jdbcType="BIGINT" property="id" />
    <result column="company_id" jdbcType="BIGINT" property="companyId" />
    <result column="resume_id" jdbcType="BIGINT" property="resumeId" />
    <result column="org_id" jdbcType="BIGINT" property="orgId" />
    <result column="started_at" jdbcType="TIMESTAMP" property="startedAt" />
    <result column="ended_at" jdbcType="TIMESTAMP" property="endedAt" />
    <result column="position" jdbcType="VARCHAR" property="position" />
    <result column="functions" jdbcType="VARCHAR" property="functions" />
    <result column="grade" jdbcType="INTEGER" property="grade" />
    <result column="dept_id" jdbcType="BIGINT" property="deptId" />
    <result column="annual_salary" jdbcType="DECIMAL" property="annualSalary" />
    <result column="resume_type" jdbcType="INTEGER" property="resumeType" />
    <result column="contact_person_type" jdbcType="INTEGER" property="contactPersonType" />
    <result column="contact_type" jdbcType="INTEGER" property="contactType" />
    <result column="recruit_location_ids" jdbcType="VARCHAR" property="recruitLocationIds" />
    <result column="recruit_functions" jdbcType="VARCHAR" property="recruitFunctions" />
    <result column="on_job" jdbcType="INTEGER" property="onJob" />
    <result column="is_contact" jdbcType="INTEGER" property="isContact" />
    <result column="created_by" jdbcType="BIGINT" property="createdBy" />
    <result column="updated_by" jdbcType="BIGINT" property="updatedBy" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="superior_position" jdbcType="VARCHAR" property="superiorPosition" />
    <result column="underling_number" jdbcType="INTEGER" property="underlingNumber" />
    <result column="industry" jdbcType="INTEGER" property="industry" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.inmind.mybatis.entity.ResumeExperiencePOWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="org_description" jdbcType="LONGVARCHAR" property="orgDescription" />
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
    <result column="salary_detail" jdbcType="LONGVARCHAR" property="salaryDetail" />
    <result column="performance" jdbcType="LONGVARCHAR" property="performance" />
    <result column="left_reason" jdbcType="LONGVARCHAR" property="leftReason" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, company_id, resume_id, org_id, started_at, ended_at, position, functions, grade, 
    dept_id, annual_salary, resume_type, contact_person_type, contact_type, recruit_location_ids, 
    recruit_functions, on_job, is_contact, created_by, updated_by, created_at, updated_at, 
    superior_position, underling_number, industry
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    org_description, description, salary_detail, performance, left_reason
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.inmind.mybatis.entity.ResumeExperiencePOExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume_experience
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.inmind.mybatis.entity.ResumeExperiencePOExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from resume_experience
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.inmind.mybatis.entity.ResumeExperiencePOExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from resume_experience
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.inmind.mybatis.entity.ResumeExperiencePOWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into resume_experience
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="resumeId != null">
        resume_id,
      </if>
      <if test="orgId != null">
        org_id,
      </if>
      <if test="startedAt != null">
        started_at,
      </if>
      <if test="endedAt != null">
        ended_at,
      </if>
      <if test="position != null">
        position,
      </if>
      <if test="functions != null">
        functions,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
      <if test="annualSalary != null">
        annual_salary,
      </if>
      <if test="resumeType != null">
        resume_type,
      </if>
      <if test="contactPersonType != null">
        contact_person_type,
      </if>
      <if test="contactType != null">
        contact_type,
      </if>
      <if test="recruitLocationIds != null">
        recruit_location_ids,
      </if>
      <if test="recruitFunctions != null">
        recruit_functions,
      </if>
      <if test="onJob != null">
        on_job,
      </if>
      <if test="isContact != null">
        is_contact,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="superiorPosition != null">
        superior_position,
      </if>
      <if test="underlingNumber != null">
        underling_number,
      </if>
      <if test="industry != null">
        industry,
      </if>
      <if test="orgDescription != null">
        org_description,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="salaryDetail != null">
        salary_detail,
      </if>
      <if test="performance != null">
        performance,
      </if>
      <if test="leftReason != null">
        left_reason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="resumeId != null">
        #{resumeId,jdbcType=BIGINT},
      </if>
      <if test="orgId != null">
        #{orgId,jdbcType=BIGINT},
      </if>
      <if test="startedAt != null">
        #{startedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="endedAt != null">
        #{endedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="position != null">
        #{position,jdbcType=VARCHAR},
      </if>
      <if test="functions != null">
        #{functions,jdbcType=VARCHAR},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=INTEGER},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=BIGINT},
      </if>
      <if test="annualSalary != null">
        #{annualSalary,jdbcType=DECIMAL},
      </if>
      <if test="resumeType != null">
        #{resumeType,jdbcType=INTEGER},
      </if>
      <if test="contactPersonType != null">
        #{contactPersonType,jdbcType=INTEGER},
      </if>
      <if test="contactType != null">
        #{contactType,jdbcType=INTEGER},
      </if>
      <if test="recruitLocationIds != null">
        #{recruitLocationIds,jdbcType=VARCHAR},
      </if>
      <if test="recruitFunctions != null">
        #{recruitFunctions,jdbcType=VARCHAR},
      </if>
      <if test="onJob != null">
        #{onJob,jdbcType=INTEGER},
      </if>
      <if test="isContact != null">
        #{isContact,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="superiorPosition != null">
        #{superiorPosition,jdbcType=VARCHAR},
      </if>
      <if test="underlingNumber != null">
        #{underlingNumber,jdbcType=INTEGER},
      </if>
      <if test="industry != null">
        #{industry,jdbcType=INTEGER},
      </if>
      <if test="orgDescription != null">
        #{orgDescription,jdbcType=LONGVARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="salaryDetail != null">
        #{salaryDetail,jdbcType=LONGVARCHAR},
      </if>
      <if test="performance != null">
        #{performance,jdbcType=LONGVARCHAR},
      </if>
      <if test="leftReason != null">
        #{leftReason,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.inmind.mybatis.entity.ResumeExperiencePOExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from resume_experience
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update resume_experience
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=BIGINT},
      </if>
      <if test="record.resumeId != null">
        resume_id = #{record.resumeId,jdbcType=BIGINT},
      </if>
      <if test="record.orgId != null">
        org_id = #{record.orgId,jdbcType=BIGINT},
      </if>
      <if test="record.startedAt != null">
        started_at = #{record.startedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endedAt != null">
        ended_at = #{record.endedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.position != null">
        position = #{record.position,jdbcType=VARCHAR},
      </if>
      <if test="record.functions != null">
        functions = #{record.functions,jdbcType=VARCHAR},
      </if>
      <if test="record.grade != null">
        grade = #{record.grade,jdbcType=INTEGER},
      </if>
      <if test="record.deptId != null">
        dept_id = #{record.deptId,jdbcType=BIGINT},
      </if>
      <if test="record.annualSalary != null">
        annual_salary = #{record.annualSalary,jdbcType=DECIMAL},
      </if>
      <if test="record.resumeType != null">
        resume_type = #{record.resumeType,jdbcType=INTEGER},
      </if>
      <if test="record.contactPersonType != null">
        contact_person_type = #{record.contactPersonType,jdbcType=INTEGER},
      </if>
      <if test="record.contactType != null">
        contact_type = #{record.contactType,jdbcType=INTEGER},
      </if>
      <if test="record.recruitLocationIds != null">
        recruit_location_ids = #{record.recruitLocationIds,jdbcType=VARCHAR},
      </if>
      <if test="record.recruitFunctions != null">
        recruit_functions = #{record.recruitFunctions,jdbcType=VARCHAR},
      </if>
      <if test="record.onJob != null">
        on_job = #{record.onJob,jdbcType=INTEGER},
      </if>
      <if test="record.isContact != null">
        is_contact = #{record.isContact,jdbcType=INTEGER},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=BIGINT},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=BIGINT},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.superiorPosition != null">
        superior_position = #{record.superiorPosition,jdbcType=VARCHAR},
      </if>
      <if test="record.underlingNumber != null">
        underling_number = #{record.underlingNumber,jdbcType=INTEGER},
      </if>
      <if test="record.industry != null">
        industry = #{record.industry,jdbcType=INTEGER},
      </if>
      <if test="record.orgDescription != null">
        org_description = #{record.orgDescription,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.salaryDetail != null">
        salary_detail = #{record.salaryDetail,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.performance != null">
        performance = #{record.performance,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.leftReason != null">
        left_reason = #{record.leftReason,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update resume_experience
    set id = #{record.id,jdbcType=BIGINT},
      company_id = #{record.companyId,jdbcType=BIGINT},
      resume_id = #{record.resumeId,jdbcType=BIGINT},
      org_id = #{record.orgId,jdbcType=BIGINT},
      started_at = #{record.startedAt,jdbcType=TIMESTAMP},
      ended_at = #{record.endedAt,jdbcType=TIMESTAMP},
      position = #{record.position,jdbcType=VARCHAR},
      functions = #{record.functions,jdbcType=VARCHAR},
      grade = #{record.grade,jdbcType=INTEGER},
      dept_id = #{record.deptId,jdbcType=BIGINT},
      annual_salary = #{record.annualSalary,jdbcType=DECIMAL},
      resume_type = #{record.resumeType,jdbcType=INTEGER},
      contact_person_type = #{record.contactPersonType,jdbcType=INTEGER},
      contact_type = #{record.contactType,jdbcType=INTEGER},
      recruit_location_ids = #{record.recruitLocationIds,jdbcType=VARCHAR},
      recruit_functions = #{record.recruitFunctions,jdbcType=VARCHAR},
      on_job = #{record.onJob,jdbcType=INTEGER},
      is_contact = #{record.isContact,jdbcType=INTEGER},
      created_by = #{record.createdBy,jdbcType=BIGINT},
      updated_by = #{record.updatedBy,jdbcType=BIGINT},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      superior_position = #{record.superiorPosition,jdbcType=VARCHAR},
      underling_number = #{record.underlingNumber,jdbcType=INTEGER},
      industry = #{record.industry,jdbcType=INTEGER},
      org_description = #{record.orgDescription,jdbcType=LONGVARCHAR},
      description = #{record.description,jdbcType=LONGVARCHAR},
      salary_detail = #{record.salaryDetail,jdbcType=LONGVARCHAR},
      performance = #{record.performance,jdbcType=LONGVARCHAR},
      left_reason = #{record.leftReason,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update resume_experience
    set id = #{record.id,jdbcType=BIGINT},
      company_id = #{record.companyId,jdbcType=BIGINT},
      resume_id = #{record.resumeId,jdbcType=BIGINT},
      org_id = #{record.orgId,jdbcType=BIGINT},
      started_at = #{record.startedAt,jdbcType=TIMESTAMP},
      ended_at = #{record.endedAt,jdbcType=TIMESTAMP},
      position = #{record.position,jdbcType=VARCHAR},
      functions = #{record.functions,jdbcType=VARCHAR},
      grade = #{record.grade,jdbcType=INTEGER},
      dept_id = #{record.deptId,jdbcType=BIGINT},
      annual_salary = #{record.annualSalary,jdbcType=DECIMAL},
      resume_type = #{record.resumeType,jdbcType=INTEGER},
      contact_person_type = #{record.contactPersonType,jdbcType=INTEGER},
      contact_type = #{record.contactType,jdbcType=INTEGER},
      recruit_location_ids = #{record.recruitLocationIds,jdbcType=VARCHAR},
      recruit_functions = #{record.recruitFunctions,jdbcType=VARCHAR},
      on_job = #{record.onJob,jdbcType=INTEGER},
      is_contact = #{record.isContact,jdbcType=INTEGER},
      created_by = #{record.createdBy,jdbcType=BIGINT},
      updated_by = #{record.updatedBy,jdbcType=BIGINT},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      superior_position = #{record.superiorPosition,jdbcType=VARCHAR},
      underling_number = #{record.underlingNumber,jdbcType=INTEGER},
      industry = #{record.industry,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByExampleWithBLOBsWithRowbounds" parameterType="com.inmind.mybatis.entity.ResumeExperiencePOExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume_experience
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithRowbounds" parameterType="com.inmind.mybatis.entity.ResumeExperiencePOExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from resume_experience
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>